(function (react, ReactDOM, d3$1) {
  'use strict';

  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl =
    'https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/video-game-sales-data.json';

  const useData = () => {
    const [data, setData] = react.useState(null);
    if (data) {
      console.log(data[0]);
    }

    react.useEffect(() => {
      
      d3$1.json(jsonUrl).then((data) => {
        
        setData(data);
      });
    }, []);
    return data;
  };

  const Marks = ({
    root,
    color,
    onMouseEnter,
    onMouseOut,
    colorMap
    
  }) => (
    React.createElement( 'g', { className: "mark" },
      root.leaves().map((d, i) => {
     
        const name = d.data.name.split(/(?=[A-Z][^A-Z])/g);
        return (
          React.createElement( React.Fragment, null,
          React.createElement( 'rect', {
            className: 'tile', x: d.x0, y: d.y0, width: d.x1 - d.x0, height: d.y1 - d.y0, fill: colorMap[i], onMouseEnter: (e) => onMouseEnter(d, e), onMouseOut: () => onMouseOut(null), 'data-name': d.data.name, 'data-category': d.data.category, 'data-value': d.data.value }),
          React.createElement( 'text', null, name.map((n,i)=>React.createElement( 'tspan', { x: d.x0, dx: 2, y: d.y0+i*7+8 }, n)) )
          
          )
        );
      })
    )
  );

  const positionLegendY = (i) => {
    if (i < 6) {
      return 0;
    }
    if (i < 12) {
      return 50;
    }
    if (i < 18) {
      return 100;
    }
  };
  const positionLegendX = (i) => {
    if (i < 6) {
      return i * 80;
    }
    if (i < 12) {
      return i * 80 - 80 * 6;
    }
    if (i < 18) {
      return i * 80 - 80 * 12;
    }
  };
  const a = Array.from(Array(18).keys());
  const Legend = ({
    root,
    color,
    innerHeight,
    innerWidth,
   newColorMap
  }) => {
    return (
      React.createElement( 'g', {
        id: "legend", transform: `translate(${innerWidth/4},${
        innerHeight + 50
      })` },
        root.children.map((d, i) => {
          
          return (
            React.createElement( React.Fragment, null,
              React.createElement( 'rect', {
                className: "legend-item", x: positionLegendX(i), y: positionLegendY(i), width: 15, height: 15, fill: newColorMap[i] }),
              React.createElement( 'text', {
                x: positionLegendX(i), y: positionLegendY(i), dx: 20, dy: 10 },
                d.data.name
              )
            )
          );
        })
      )
    );
  };

  const width = window.innerWidth;
  const height = window.innerHeight;
  const margin = {
    top: 50,
    bottom: 50,
    right: 50,
    left: 50,
  };
  const innerHeight =
    height - margin.top - margin.bottom;
  const innerWidth =
    width - margin.right - margin.left;

  const App = () => {
    const data = useData();

    const [tool, setTool] = react.useState([]);
    if (!data) {
      return React.createElement( 'pre', null, "loading.." );
    }

    const fader = (color) => {
      return d3$1.interpolateRgb(color)(0);
    };
    const color = d3$1.scaleOrdinal().range(
      [
        '#8dd3c7',
        '#ffffb3',
        '#bebada',
        '#fb8072',
        '#80b1d3',
        '#fdb462',
        '#b3de69',
        '#fccde5',
        '#d9d9d9',
        '#bc80bd',
        '#ccebc5',
        '#ffed6f',
        '#66c2a5',
        '#fc8d62',
        '#8da0cb',
        '#e78ac3',
        '#a6d854',
        '#ffd92f',
        '#e5c494',
        '#b3b3b3',
      ].map(fader)
    );

    const treemap = d3
      .treemap()
      .tile(d3$1.treemapResquarify)
      .size([innerWidth, innerHeight])
      .paddingInner(1);

    const root = d3
      .hierarchy(data)
      .eachBefore(function (d) {
        d.data.id =
          (d.parent ? d.parent.data.id + '.' : '') +
          d.data.name;
      })
      .sum(function (d) {
        return (d.value = +d.value);
      })
      .sort(function (a, b) {
        return (
          b.height - a.height || b.value - a.value
        );
      });

    treemap(root);

    const c = () => {
      let a = [];
      root.leaves().map((d) => {
        a.push(color(d.data.category));
      });
      return a;
    };
    const colorMap = c();
    let newColorMap = [...new Set(colorMap)];

    const onMouseMove = (e) => {
      const [n, c, v] = tool;

      e.pageX > innerWidth / 2
        ? (e.pageX = e.pageX - 150) &&
          (e.pageY = e.pageY - 100)
        : e.pageX + 40;
      tooldiv
        .style('opacity', 1)
        .html(
          () =>
            `<span>Name:</span> ${n}</br> <span>Categrogy:</span> ${c}</br> <span>Value:</span> ${v}`
        )
        .style('top', e.pageY - 40 + 'px')
        .style('left', e.pageX + 40 + 'px')
        .attr('data-value', v);
    };

    const onMouseEnter = (d, e) => {
      let n = d.data.name;
      let c = d.data.category;
      let v = d.data.value;
      setTool([n, c, v]);
    };
    const onMouseOut = (d) => {
      tooldiv.style('opacity', 0);
    };
    return (
      React.createElement( React.Fragment, null,
        React.createElement( 'div', { id: "title" },
          React.createElement( 'h1', null, "Video Game Sales" ),
          React.createElement( 'p', { id: "description" }, "Top 100 Most Sold Video Games Grouped by Platform")
        ),
  			React.createElement( 'div', { className: "copyright" }, "Made by ", React.createElement( 'a', { href: "https://thembdev.com" },
            React.createElement( 'img', { src: "https://mbdev-utils.s3.eu-west-3.amazonaws.com/mbdev_logo_sm.svg", alt: "mbdev" })
          )
        ),
        React.createElement( 'g', null,
          React.createElement( 'svg', {
            width: width, height: height + 100, transform: `translate(${
            margin.left
          },${0})` },
            React.createElement( 'g', {
              width: innerWidth, height: innerHeight, onMouseMove: (e) => onMouseMove(e) },
              React.createElement( Marks, {
                root: root, color: color, colorMap: colorMap, onMouseEnter: (e, d) =>
                  onMouseEnter(e), onMouseOut: () => onMouseOut() })
            ),

            React.createElement( Legend, {
              color: color, newColorMap: newColorMap, root: root, innerWidth: innerWidth, innerHeight: innerHeight })
          )
        )
        
      )
    );
  };

  const rootElement = document.getElementById(
    'root'
  );
  ReactDOM.render(React.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,